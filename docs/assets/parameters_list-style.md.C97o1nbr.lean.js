import{_ as d,D as s,c as n,I as e,w as i,l as t,a,a9 as h,o as p}from"./chunks/framework.Db5Mj75j.js";const x=JSON.parse('{"title":"Query String Parameters","description":"","frontmatter":{"aside":false,"head":[["link",{"rel":"canonical","href":"https://pointw-dev.github.io/halchemy/parameters/list-style.html"}]]},"headers":[],"relativePath":"parameters/list-style.md","filePath":"parameters/list-style.md"}'),m={name:"parameters/list-style.md"},u=t("h1",{id:"query-string-parameters",tabindex:"-1"},[a("Query String Parameters "),t("a",{class:"header-anchor",href:"#query-string-parameters","aria-label":'Permalink to "Query String Parameters"'},"​")],-1),y=t("h2",{id:"parameters-list-styles",tabindex:"-1"},[a("Parameters List Styles "),t("a",{class:"header-anchor",href:"#parameters-list-styles","aria-label":'Permalink to "Parameters List Styles"'},"​")],-1),_=t("p",null,[a("If you want to pass a list/array as a query string parameter, there is no universally accepted way to do this. By default, halchemy will serialize the list as multiple parameters with the same name. For example, "),t("code",null,'{"list":["a","b","c"]}'),a(" will be serialized as "),t("code",null,"list=a&list=b&list=c"),a(". You can change how lists are serialized by setting the "),t("code",null,"parameters list style"),a(".")],-1),g=t("div",{class:"language-python vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"python"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"api.parameters_list_style "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'comma'")])])])],-1),k=t("div",{class:"language-javascript vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"javascript"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"api.parameterslistStyle "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'comma'")])])])],-1),b=t("div",{class:"language-ruby vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"ruby"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"api.parameters_list_style "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "comma"')])])])],-1),f=h("",2);function v(E,S,C,q,F,P){const l=s("tab"),r=s("future-languages"),o=s("tabs"),c=s("comments-section");return p(),n("div",null,[u,y,_,e(o,null,{default:i(()=>[e(l,{name:"Python"},{default:i(()=>[g]),_:1}),e(l,{name:"JavaScript"},{default:i(()=>[k]),_:1}),e(l,{name:"Ruby"},{default:i(()=>[b]),_:1}),e(r)]),_:1}),f,e(c,{repo:"pointw-dev/halchemy",repoId:"R_kgDOJ3PqBg",category:"General",categoryId:"DIC_kwDOJ3PqBs4CoFSi"})])}const B=d(m,[["render",v]]);export{x as __pageData,B as default};
