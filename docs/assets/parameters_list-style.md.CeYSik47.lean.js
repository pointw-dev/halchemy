import{_ as d,D as l,c,I as a,w as s,l as t,a as e,aa as n,o as h}from"./chunks/framework.Bj3UIrO7.js";const w=JSON.parse('{"title":"Query String Parameters","description":"","frontmatter":{"aside":false,"head":[["link",{"rel":"canonical","href":"https://pointw-dev.github.io/halchemy/parameters/list-style.html"}]]},"headers":[],"relativePath":"parameters/list-style.md","filePath":"parameters/list-style.md"}'),p={name:"parameters/list-style.md"},m=t("h1",{id:"query-string-parameters",tabindex:"-1"},[e("Query String Parameters "),t("a",{class:"header-anchor",href:"#query-string-parameters","aria-label":'Permalink to "Query String Parameters"'},"​")],-1),u=t("h2",{id:"parameters-list-styles",tabindex:"-1"},[e("Parameters List Styles "),t("a",{class:"header-anchor",href:"#parameters-list-styles","aria-label":'Permalink to "Parameters List Styles"'},"​")],-1),y=t("p",null,[e("If you want to pass a list/array as a query string parameter, there is no universally accepted way to do this. By default, halchemy will serialize the list as multiple parameters with the same name. For example, "),t("code",null,'{"list":["a","b","c"]}'),e(" will be serialized as "),t("code",null,"list=a&list=b&list=c"),e(". You can change how lists are serialized by setting the "),t("code",null,"parameters list style"),e(".")],-1),_=t("div",{class:"language-python vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"python"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"api.parameters_list_style "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'comma'")])])])],-1),g=t("div",{class:"language-javascript vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"javascript"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"api.parameterslistStyle "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'comma'")])])])],-1),k=t("div",{class:"language-ruby vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"ruby"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"api.parameters_list_style "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "comma"')])])])],-1),b=n("",2);function f(v,E,S,C,F,q){const i=l("tab"),r=l("future-languages"),o=l("tabs");return h(),c("div",null,[m,u,y,a(o,null,{default:s(()=>[a(i,{name:"Python"},{default:s(()=>[_]),_:1}),a(i,{name:"JavaScript"},{default:s(()=>[g]),_:1}),a(i,{name:"Ruby"},{default:s(()=>[k]),_:1}),a(r)]),_:1}),b])}const x=d(p,[["render",f]]);export{w as __pageData,x as default};
