import{_ as a,C as t,c as i,o as n,a7 as o,G as p}from"./chunks/framework.hQ1v-34E.js";const l="/halchemy/img/alice.jpg",g=JSON.parse('{"title":"Key Terms","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://pointw-dev.github.io/halchemy/concepts/terms.html"}]]},"headers":[],"relativePath":"concepts/terms.md","filePath":"concepts/terms.md"}'),h={name:"concepts/terms.md"};function r(d,e,c,k,u,E){const s=t("comments-section");return n(),i("div",null,[e[0]||(e[0]=o(`<h1 id="key-terms" tabindex="-1">Key Terms <a class="header-anchor" href="#key-terms" aria-label="Permalink to &quot;Key Terms&quot;">​</a></h1><h2 id="url" tabindex="-1">URL <a class="header-anchor" href="#url" aria-label="Permalink to &quot;URL&quot;">​</a></h2><p>A URL (universal resource locator) is a URI that identifies how and where on the internet to obtain a representation of a resource.</p><div class="info custom-block"><p class="custom-block-title">NOTE</p><p>A URN (universal resource name) uniquely identifies a resource, but without specifying its location. Collectively, both URNs and URLs are called URIs (universal resource identifiers) - that is resources are identified (URI) by name (URN) or location (URL).</p></div><h2 id="resource" tabindex="-1">Resource <a class="header-anchor" href="#resource" aria-label="Permalink to &quot;Resource&quot;">​</a></h2><p>This is the R in a URL. A resource is an abstract concept. For example think of a Person. What goes through your head? There is a rich set of properties associated with any given person. You can imagine birth records, a picture of their face, a video of the person describing herself, a JSON that lists her name and address. This barely scratches the surface of everything meant by an individual Person. A resource, conceptually, includes all the features and properties that make up that thing.</p><h2 id="representation" tabindex="-1">Representation <a class="header-anchor" href="#representation" aria-label="Permalink to &quot;Representation&quot;">​</a></h2><p>A representation is a set of bytes that represent a resource. It takes the abstract resource and serializes some part of it into bytes that provide some of the resource&#39;s features or properties. For example, a JSON representation of a Person resource might look like this:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice Liddel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;London, England&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Another representation of the same resource (in XML) might look like this:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">first-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Alice&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">first-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">last-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Liddel&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">last-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;7&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">city</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;London&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">city</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;England&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>And as an image, it might look like this:</p><p><img src="`+l+`" alt="Alice"></p><p>Each of these very different representations are of the same, singular Person resource.</p><h2 id="media-type" tabindex="-1">Media Type <a class="header-anchor" href="#media-type" aria-label="Permalink to &quot;Media Type&quot;">​</a></h2><p>A media type is a <strong>name</strong> we use to describe the format of a representation. For example, when we use JSON to represent a resource, we are using the media type whose name is <code>application/json</code>. The XML representation uses a media type of <code>application/xml</code>, and the image representation above uses a media type of <code>image/jpeg</code>. When you GET a resource, the response includes a header <code>Content-Type</code> which identifies the media type of the body.</p><h2 id="hypermedia-hypertext" tabindex="-1">Hypermedia / Hypertext <a class="header-anchor" href="#hypermedia-hypertext" aria-label="Permalink to &quot;Hypermedia / Hypertext&quot;">​</a></h2><p>If a media type contains links to other resources, it is called hypermedia. The term &quot;hypermedia&quot; grew out of &quot;hypertext&quot; to include all media that contains links. Even though the HT in HTTP stands for Hypertext, this notion of linking is often overlooked in so-called RESTful applications. Links are what powers the HATEOAS (Hypermedia As The Engine Of Application State) part of REST. This is a powerful concept that allows for a great deal of flexibility in how clients interact with a server. It also decouples the client and server, as the client can navigate the service&#39;s resources without needing to know the structure of the service ahead of time - allowing client and server to vary independently.</p><h2 id="hal" tabindex="-1">HAL <a class="header-anchor" href="#hal" aria-label="Permalink to &quot;HAL&quot;">​</a></h2><p>HAL (Hypertext Application Language) adds links to JSON (or XML). Its media type name is <code>application/hal+json</code> (or <code>application/hal+xml</code>). Here is an example of a HAL representation of a Person resource:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice Liddel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;London, England&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;_links&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;self&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;href&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/people/alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;current-location&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;href&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/places/wonderland&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="request" tabindex="-1">Request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;Request&quot;">​</a></h2><p>An HTTP request is a structured stream of bytes sent from a client to a server. On the wire, a POST request could look like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST http://example.org/api/people HTTP/1.1⏎Host: example.org⏎Content-Type: application/json⏎⏎{&quot;name&quot;: &quot;Alice Liddel&quot;, &quot;age&quot;: 7, &quot;address&quot;: &quot;London, England&quot;}</span></span></code></pre></div><p>This stream of bytes is sent one at a time to the server. We often do not think of a request in this way. Sometimes we think of a request as a Python object, or a JavaScript object. But at its core, a request is just a stream of bytes.</p><p>The same stream can be visualized by splitting on carriage return (⏎):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST http://example.org/api/people HTTP/1.1</span></span>
<span class="line"><span>Host: example.org</span></span>
<span class="line"><span>Content-Type: application/json</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{&quot;name&quot;: &quot;Alice Liddel&quot;, &quot;age&quot;: 7, &quot;address&quot;: &quot;London, England&quot;}</span></span></code></pre></div><p>Now the structure of an HTTP request is clearer. There is a request line, a set of request headers, and (where applicable) the body of the request. The body is separated from the headers by a blank line. The request line starts with the method (<code>POST</code>), followed by the URL of the resource that is the subject of the request (<code>http://example.org/api/people</code>), and the protocol (<code>HTTP/1.1</code>). The headers are key-value pairs (<code>:</code> delimited), and the body is the payload of the request, described by the <code>Content-type</code> header.</p><p>When you GET a resource with halchemy, you can look at the request that was sent by examining the <code>resource._halchemy.request</code> object.</p><h2 id="response" tabindex="-1">Response <a class="header-anchor" href="#response" aria-label="Permalink to &quot;Response&quot;">​</a></h2><p>An HTTP response is a structured stream of bytes sent from a server to a client. On the wire, a response to a GET request could look like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HTTP/1.1 200 OK⏎Content-Type: application/hal+json⏎Content-Length: 64⏎⏎{⏎  &quot;name&quot;: &quot;Alice Liddel&quot;,⏎  &quot;age&quot;: 7,⏎  &quot;address&quot;: &quot;London, England&quot;,⏎  &quot;_links&quot;: {⏎    &quot;self&quot;: {&quot;href&quot;: &quot;/people/alice&quot;}⏎  }⏎}</span></span></code></pre></div><p>This stream of bytes is received by the client one byte at a time.</p><p>Splitting on carriage return (⏎)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HTTP/1.1 200 OK</span></span>
<span class="line"><span>Content-Type: application/hal+json</span></span>
<span class="line"><span>Content-Length: 64</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;Alice Liddel&quot;,</span></span>
<span class="line"><span>  &quot;age&quot;: 7,</span></span>
<span class="line"><span>  &quot;address&quot;: &quot;London, England&quot;,</span></span>
<span class="line"><span>  &quot;_links&quot;: {</span></span>
<span class="line"><span>    &quot;self&quot;: {&quot;href&quot;: &quot;/people/alice&quot;}</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Here we see a response begins with a line that contains the protocol (<code>HTTP/1.1</code>) the response status code (<code>200</code>) and the reason text (<code>OK</code>). This is followed by a series of response headers, and then the body of the response. The body is separated from the headers by a blank line. The headers are key-value pairs (<code>:</code> delimited), and the body is the payload of the response, described by the <code>Content-type</code> header.</p><p>When you GET a resource with halchemy, you can look at the response that was received by examining the <code>resource._halchemy.response</code> object.</p><p>All of these terms are easily confused - especially the ones that begin with &quot;RE&quot;. Try this on for size:</p><blockquote><p>The body of the response to a request is a representation of a resource.</p></blockquote><p>The object returned to you by a request using halchemy is a blend of the resource representation, and the request and response. The object is optimized to be used as the resource representation, so is modeled as a Resource object. It contains the other data (request, response, error details) in a property named <code>_halchemy</code> to keep it out of the way while you are working with the data you really care about. The metadata is there when you need it.</p>`,40)),p(s,{repo:"pointw-dev/halchemy",repoId:"R_kgDOJ3PqBg",category:"General",categoryId:"DIC_kwDOJ3PqBs4CoFSi"})])}const m=a(h,[["render",r]]);export{g as __pageData,m as default};
